###################################################
# 13 Detecci칩n de l칤neas, c칤rculos y manchas ######
###################################################

# Nuestra configuraci칩n, importar bibliotecas, crear nuestra funci칩n Imshow y descargar nuestras im치genes
import cv2
import numpy as np
from matplotlib import pyplot as plt

# Definir nuestra funci칩n imshow
def imshow(title = "Image", image = None, size = 10):
    w, h = image.shape[0], image.shape[1]
    aspect_ratio = w/h
    plt.figure(figsize=(size * aspect_ratio,size))
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.title(title)
    plt.show()

# ## **Detecci칩n de l칤nea: uso de l칤neas Hough**
#
# La transformada de Hough toma un mapa de bordes binarios como entrada e intenta ubicar los bordes colocados como
# l칤neas rectas. La idea de la transformada de Hough es que cada punto de borde en el mapa de bordes se transforma en
# todas las l칤neas posibles que podr칤an pasar por ese punto.
#
# Es decir, es una transformada utilizada para detectar l칤neas rectas.
# Para aplicar la Transformaci칩n, primero es deseable un preprocesamiento de detecci칩n de bordes.

# En general, una l칤nea se puede detectar al encontrar el n칰mero de intersecciones entre curvas. Cuantas m치s curvas se
# intersecan, significa que la l칤nea representada por esa intersecci칩n tiene m치s puntos. En general, podemos definir un
# umbral del n칰mero m칤nimo de intersecciones necesarias para detectar una l칤nea.
# Esto es lo que hace la transformada de l칤nea de Hough. Realiza un seguimiento de la intersecci칩n entre las curvas de
# cada punto de la imagen. Si el n칰mero de intersecciones est치 por encima de alg칰n umbral, lo declara como una l칤nea
# con los par치metros( 풪 ,r풪)del punto de intersecci칩n.

# `l칤neas = cv2.HoughLines(imagen binarizada/con umbral, 洧랣 precisi칩n, 洧랚 precisi칩n, umbral)`
# bordes : Salida del detector de bordes.
# l칤neas : Un vector para almacenar las coordenadas del inicio y final de la l칤nea.
# rho : El par치metro de resoluci칩n \rho en p칤xeles.
# theta : La resoluci칩n del par치metro \theta en radianes.
# umbral : El n칰mero m칤nimo de puntos de intersecci칩n para detectar una l칤nea.
# - El umbral aqu칤 es el voto m칤nimo para que se considere una l칤nea
#

image = cv2.imread('images/soduku.jpg')
imshow('Original', image)

# Escala de grises y Canny Edges extra칤dos
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
edges = cv2.Canny(gray, 100, 170, apertureSize = 3)  # binarizamos la imagen

# Ejecute HoughLines con una precisi칩n de rho de 1 p칤xel
# precisi칩n theta de np.pi / 180 que es 1 grado (es un valor predefinido)
# Nuestro umbral de l칤nea est치 establecido en 240 (n칰mero de puntos en l칤nea que vamos a buscar)
lines = cv2.HoughLines(edges, 1, np.pi / 180, 240)
# nos da b치sicamente un array de l칤neas y 치ngulos, as칤 que tenemos que extraer todas las l칤neas por separado de lines.
print(lines)
'''[[[   4.           2.8797932]]
 [[   2.           2.8797932]]...'''
# // Dibujar las lineas
# Iteramos a trav칠s de cada l칤nea y la convertimos al formato
# requerido por cv2.lines (es decir, requiere puntos finales)
for line in lines:
    rho, theta = line[0]
    a = np.cos(theta)
    b = np.sin(theta)
    x0 = a * rho
    y0 = b * rho
    x1 = int(x0 + 1000 * (-b))
    y1 = int(y0 + 1000 * (a))
    x2 = int(x0 - 1000 * (-b))
    y2 = int(y0 - 1000 * (a))
    cv2.line(image, (x1, y1), (x2, y2), (255, 0, 0), 2)

imshow('Hough Lines', image)


# ## **L칤neas de Hough probabil칤sticas** # el anterior funciona muy bien, pero puede ser costoso
# Una transformada de Hough se considera probabil칤stica si utiliza un muestreo aleatorio de los puntos de borde.
# Estos algoritmos se pueden dividir en funci칩n de c칩mo asignan el espacio de la imagen al espacio de los par치metros.
# cv2.HoughLinesP(imagen binarizada, precisi칩n 洧랣, precisi칩n 洧랚, umbral, longitud m칤nima de l칤nea, espacio m치ximo entre
#                 l칤neas)


# Escala de grises y Canny Edges extra칤dos
image = cv2.imread('images/soduku.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
edges = cv2.Canny(gray, 100, 170, apertureSize = 3)

# Nuevamente usamos las mismas precisiones rho y theta
# Sin embargo, especificamos un voto m칤nimo (pts a lo largo de la l칤nea) de 100
# y longitud de l칤nea m칤nima de 3 p칤xeles y espacio m치ximo entre l칤neas de 25 p칤xeles
lines = cv2.HoughLinesP(edges, 1, np.pi / 180, 100, 3, 25)
print(lines.shape)  # (63, 1, 4)

for x in range(0, len(lines)):
    for x1, y1, x2, y2 in lines[x]:
        cv2.line(image,(x1,y1),(x2,y2),(0,255,0),2)

imshow('Probabilistic Hough Lines', image)  # este no funciona tan bien como el otro


# ## **Detecci칩n de c칤rculos - Hough Cirlces**
# **cv2.HoughCircles**(imagen, m칠todo, dp, MinDist, param1, param2, minRadius, MaxRadius)
# - M칠todo: actualmente solo est치 disponible cv2.HOUGH_GRADIENT
# - dp - Relaci칩n inversa de la resoluci칩n del acumulador a la resoluci칩n de la imagen. Por ejemplo, si dp=1, el
#         acumulador tiene la misma resoluci칩n que la imagen de entrada. Si dp=2, el acumulador tiene la mitad de ancho
#         y alto. Para HOUGH_GRADIENT_ALT el valor recomendado es dp=1.5, a menos que se necesiten detectar algunos
#         c칤rculos muy peque침os.
# - MinDist - la distancia m칤nima entre el centro de los c칤rculos detectados
# - param1 - Valor de gradiente utilizado en la detecci칩n de bordes
# - param2 - Umbral del acumulador para el m칠todo HOUGH_GRADIENT (menor permite detectar m치s c칤rculos
#           (falsos positivos))
# - minRadius - limita el c칤rculo m치s peque침o a este tama침o (a trav칠s del radio)
# - MaxRadius - establece de manera similar el l칤mite para los c칤rculos m치s grandes


image = cv2.imread('images/Circles_Packed_In_Square_11.jpeg')
imshow('Circles', image)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# medianBlur toma una mediana de todos los p칤xeles debado del kernel_size (5) y reemplaza el elemento  con ese valor
# central, efectivo para reducir el ruido, desenfoca la imagen
blur = cv2.medianBlur(gray, 5)

circles = cv2.HoughCircles(blur, cv2.HOUGH_GRADIENT, 1.2, 25)

cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, 1.2, 100)

circles = np.uint16(np.around(circles))

for i in circles[0,:]:
    # dibujar el c칤rculo exterior
    cv2.circle(image,(i[0], i[1]), i[2], (0, 0, 255), 5)
    
    # dibujar el centro del circulo
    cv2.circle(image, (i[0], i[1]), 2, (0, 0, 255), 8)

imshow('Detected circles', image)


# ## **Detecci칩n de (blob)manchas**
#
'''Un blob se define como un 치rea interesante o b치sicamente un grupo o segmento de p칤xeles que son interesantes
en una imagen, un significado interesante que probablemente tienen alg칰n tipo de uniformidad de consistencia a trav칠s
diferentes manchas o blobs para que realmente pueda detectar diferentes blobs en las im치genes.

As칤 que es b치sicamente una forma de  revisar una imagen y encontrar 치reas interesantes, es decir *Podemos detectar 
manchas o c칤rculos en una imagen*'''

# La funci칩n **cv2.drawKeypoints** toma los siguientes argumentos:
# **cv2.drawKeypoints**(imagen de entrada, puntos clave, matriz_de_salida_en_blanco, color, banderas)
# banderas:
# - cv2.DRAW_MATCHES_FLAGS_DEFAULT
# - cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS
# - cv2.DRAW_MATCHES_FLAGS_DRAW_OVER_OUTIMG
# - cv2.DRAW_MATCHES_FLAGS_NOT_DRAW_SINGLE_POINTS

# Leer imagen
image = cv2.imread("images/Sunflowers.jpg")
imshow("Original", image)

# Configure el detector con los par치metros predeterminados.
detector = cv2.SimpleBlobDetector_create()
 
# Detectar puntos clave.
keypoints = detector.detect(image)
 
# Dibujar manchas detectadas como c칤rculos rojos.
# cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS asegura el tama침o del c칤rculo corresponde al tama침o de blob
blank = np.zeros((1,1)) 
blobs = cv2.drawKeypoints(image, keypoints, blank, (0,255,0), cv2.DRAW_MATCHES_FLAGS_DEFAULT)
 
# Mostrar puntos clave
imshow("Blobs", blobs)



